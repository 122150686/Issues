工程学：
以虚幻做游戏举例。
工程学的核心是，每一步都面临大量选择，而且确实有一些选择，比另一些选择更优秀。那么，当我想要做出更好的选择的时候，势必造成进度极其缓慢，而且依然会出错。
而如果乱选，企图先通关，很快就发现选不动了——这实际上是虚幻架构的失败。
也就是说，看似虚幻实际上什么都能做，但我实际上，只能做一些虚幻擅长的事情。

Pipeline：恐怕才是核心。
如果我打造了属于我自己的Pipeline，我就能在工程学，走很远。练琴就是这样，我知道琶音肯定是对的，我死练琶音，深入钻研，是可以研究出东西的。
这就是工程学。

工程学，是某个确定的选择。是我就选择了练习《鸟之诗》然后一直练，就完事了。而且我明确知道我能练成，我明确知道这东西能复用。所以我一直练。
虚幻也是这样，我就做FPS游戏。我明确的选择这个，明确选择，那么我很快就可以达到精深的地步。比如《鸟之诗》，然后在我完善的过程中，如果我想复用，我再额外另一套，就对了。
并且把我的一生搭进去，并且认为我的东西是好的——这只有足够无知，才能做到啊。

也就是说，如果我选择虚幻，那么我注定选的路就狭窄的多，不宽敞，只能按照他给我的路走，就那么一条（第一人称FPS）别的不用想了——但是表现力会很强。
确实也是，第一人称实时，这实际上也是我当前的世界观。

那么，如果我真的想做自己想玩的游戏，也就是说，工程学上的问题。我只能选一个，或者在不同的年龄，比如50岁，选几个，80岁，选几个。
我只能这样做。

也就是说，做事情的逻辑，和做哲学，完全不同。哲学求通用，不求甚解，但必须面面俱到。工程学是反过来的，你Unity确实无论做哪一款游戏，都和专注FPS的虚幻差的远。
那么，我最终肯定是要走到自己研发游戏引擎，然后做游戏，然后发售，这个过程的。我必须独自解决所有的问题。
而好处确实也在这里，当我确定要练鸟之诗的时候，我实际上不用解决所有琶音问题，我一个都不用练，我专注速度就行了。
所以，专注，带来速度提升——这就是做事情的魅力。

当我确定我要为他提供专用接口的时候，我可以做高铁、飞机、我可以打电话，我可以……方式多样，效果差不多。随便怎么都可以。这就是工程学。做了就好。
做理论不是这样的。
我也根本不用考虑做理论是什么样，做理论没出路。做实际，才有出路。
。。。。。。。。
我只能选择某个特定的人（群），某“一”个特定的游戏，完成，根据手上现有的条件（虚幻引擎），一直做，完事。直到我感觉受不了的时候，我自己研发一款引擎。




